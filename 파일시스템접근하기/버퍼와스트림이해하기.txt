파일을 읽고 쓰는 방식에는 크게 두가지 입니다.
버퍼와 스트림을 이용하는 방식입니다. 

ex) 버퍼링, 스트리밍
영상을 로딩할 때는 버퍼링한다
영상을 송출할 때는 스트리밍한다.

버퍼링 : 영상을 재생가능까지 데이터를 모으는 동작
스트리밍 : 방송인의 컴퓨터에서 시청자의 컴퓨터로 영상 데이터를 조금씩 전송하는 동작
스트리밍을 하는 동안에도 버퍼링을 할 수 있다. 전송이 느리면 화면을 내보내기까지
최소한의 데이터를 모아야 하고, 영상 데이터가 재생 속도보다 빠르게 전송되어도
미리 전송받은 데이터를 저장할 공간이 필요하기 때문이다.

노드의 버퍼와 스트림도 비슷합니다.
노드는 파일을 읽을 때 메모리 파일 크기만큼 공간을 마련해두며 파일데이터를 메모리에 저장한 뒤
사용자가 조작할 수 있도록 합니다. 이때 메모리에 저장된 데이터가 버퍼입니다.

버퍼를 직접 다룰 수 있는 클래스 Buffer입니다.

readFile 방식의 버퍼가 편하기는 하지만 용량이 많은 데이터를 버퍼시키면 그 용량의 메모리를 차지하게 됩니다.
이 작업을 동시다발적으로 발생하게 되면 메모리 문제가 발생할 수 있습니다. 
또한, 모든 내용을 버퍼에 다 쓴 후에나 다음 동작으로 넘어가므로 
파일읽기, 압축, 파일 쓰기 등의 조작을 연달아 할 대 매번 전체 용량을 버퍼로 처리해야 다음 단계로 넘어갑니다.

그래서 버퍼의 크기를 작게 만든 후 여러번 나눠 보내는 방식이 등장합니다.
예로 버퍼 1MB를 만든뒤 100MB 파일을 백 번에 걸쳐서 나눠 보냅니다.
이를 편리하게 만든 것이 스트림 입니다.


버퍼를 이용해서 파일을 이동하게되면 많은 메모리를 차지하게 됩니다.
스트림을 이용하게 되면 적은 메모리로 많은 용량을 파일을 처리할 수 있기 때문에 
동영상과 같은 파일들을 스트림으로 처리하게 됩니다.