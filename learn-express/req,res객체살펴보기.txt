<req 객체>

req.app : req 객체를 통해 app 객체에 접근할 수 있습니다.
        ex) 
            req.app.get('port');

req.body : body-parser 미들웨어가 만드는 요청의 본문을 해석한 객체입니다.

req.cookies : cookie-parser 미들웨어가 만드는 요청의 쿠키를 해석한 객체입니다.

req.ip : 요청의 ip주소가 담겨 있습니다.

req.params : 라우트 매개변수에 대한 정보가 담긴 객체입니다.

req.query : 쿼리스트링에 대한 정보가 담긴 객체

req.signedCookies : 서명된 쿠키들은 req.cookies 대신 여기에 담깁니다.

req.get(헤더 이름) : 헤더의 값을 가져오고 싶을 때 사용하는 메서드

<res 객체>

res.app : req.app 처럼 res 객체를 통해 app객체에 접근할 수 있습니다.

res.cookie(키, 값, 옵션) : 쿠키를 설정하는 메서드입니다.

res.clearCookie(키, 값, 옵션) : 쿠키 제거 메서드

res.end() : 데이터 없이 응답

res.json(JSON) : JSON 형식의 응답

res.redirect(주소) : 리다이렉트할 주소와 함께 응답

res.render(뷰, 데이터) : 템플릿 엔진을 렌더링해서 응답할 때 사용하는 메서드

res.send(데이터) : 데이터와 함께 응답을 보냄
                    데이터는 문자열, HTML, 버퍼, 객체, 배열

res.sendFile(경로) : 경로에 위치한 파일을 응답

res.set(헤더, 값) : 응답의 헤더를 설정합니다.

res.status(코드) : 응답 시의 HTTP 상태 코드를 지정

메서드 체이닝 활용!!!!!!!!!!!!!!!!!!