미들웨어는 익스프레스의 핵심입니다.
요청과 응답의 중간(middle)에 위치하여 미들 웨어라고 부릅니다.
라우터와 에러 헨들러 또한 미들웨어의 일종임으로 미들웨어가 익스프레스의 전부라해도 과언이 아닙니다.
미들웨어는 요청과 응답을 조작하여 기능을 추가하기도 하고, 나쁜 요청을 걸러내기도 합니다.

미들웨어는 app.use와 함께 사용합니다.
app.use(미들웨어)꼴 입니다.

app.use(미들웨어) : 모든 요청에서 미들웨어 실행
app.use('/abc', 미들웨어) : abc로 시작하는 요청에서 미들웨어 실행
app.post('/abc', 미들웨어) : abc로 시작하는 POST 요청에서 미들웨어 실행

dotenv : process.env를 관리하기 위해 설치 (미들웨어 아님)
        .env 파일을 읽어서 process.env로 만듭니다.
        process.env를 별도의 파일로 관리하는 이유는 보안과 설정의 편의성 때문입니다.
        따라서 .env 같은 별도의 파일에 비밀 키를 적어두고 dotenv 패키지로 비밀 키를 로딩하는 방식으로 관리합니다.

morgan : 
            요청과 응답에 대한 정보를 콘솔에 기록합니다.
            app.use(morgan('dev')); ex) dev, combined(배포환경), common, short, tiny
            [HTTP 메서드] [주소] [HTTP 상태 코드] [응답 속도] - [응답 바이트]

static : (설치 no! , express객체 안에서 꺼내쓰면 됨)
        정적인 파일들을 제공하는 라우터 역할을 합니다. 
        app.use('요청 경로', express.static('실제 경로'));
        app.use('/', express.static(path.join(__dirname, 'public')));

        함수의 인수로 정적파일들이 담겨있는 폴더를 지정합니다. 현재 public 폴더가 지정되었습니다.

        보안에 도움이 됩니다. (p.237 참조)

body-parser : (설치 no! , express객체 안에서 꺼내쓰면 됨, 설치해야 되는 경우도 있음
            - json, urlencoded 형식 외에도 Raw, Test 형식의 데이터를 추가로 해석할 수 있습니다.
            Raw는 요청의 본문이 버퍼 데이터일 때, Text는 텍스트 데이터일 때 해석하는 미들웨어입니다.
            버퍼나, 텍스트 요청을 처리할 필요가 있다면 설치하면 됩니다.
            )
            요청의 본문에 있는 데이터를 해석해서 req.body 객체로 만들어주는 미들웨어 입니다.
            보통 폼 데이터나 AJAX 요청의 데이터를 처리합니다. 단, 멀티파트(이미지, 동영상, 파일) 데이터는 처리하지 못합니다.
            그 경우에는 multer 모듈을 사용하면 됩니다.

            app.use(express.json());
            app.use(express.urlencoded({ extended: false}));

            urlencoded 메서드의 { extended : false} 라는 옵션이 있습니다.
            false면 노드의 querystring 모듈을 사용하여 쿼리스트링을 해석하고
            true면 qs 모듈을 사용하여 쿼리스트링을 해석합니다.
            qs 모듈은 내장 모듈이 아니라 npm 패키지이며, querystring 모듈의 기능을 좀 더 확장한 모듈입니다.

cookie-parser : 
                요청에 동봉된 쿠키를 해석해  req.cookies 객체로 만듭니다.
                
                - app.use(cookieParser(비밀키));

                유효기간이 지난 쿠키는 알아서 걸러냅니다.

                첫번째 인수로 비밀키를 넣어줄 수 있습니다. 서명된 쿠키가 있는 경우, 제공한 비밀 키를 통해 해당 쿠키가 내 서버가 만든 쿠키임을 검증할 수 있습니다.
                쿠키는 클라이언트에서 위조하기 쉬우므로 비밀 키를 통해 만들어낸 서명을 쿠키 값 뒤에 붙입니다. 서명이 붙으면 쿠키가
                name=doy.sign과 같은 모양이 됩니다. 서명된 쿠키는 req.cookies 대신 req.signedCookies객체에 들어 있습니다.

                쿠키를 생성할 때 쓰이는 것은 아닙니다.
                생성/제거하기 위해서는 res.cookie, res.clearCookie 메서드를 사용해야 합니다.
                쿠키를 지우려면, 키와 값 외에 옵션도 동일해야 쿠키가 지워집니다. 단, expires나 maxAge옵션을 일치할 필요가 없습니다.

                옵션 중에는 signed라는 옵션이 있는데 이를 true로 설정하면 쿠키 뒤에 서명이 붙습니다. 내 서버가 쿠키를 만들었다는 것을 검증할 수 있으므로 대부분의 경우
                서명옵션을 켜두는 것이 좋습니다. 서명을 위한 비밀 키는 cookieParser 미들웨어에 인수로 넣은 process.env.COOKIE_SECRET이 됩니다.

express-session : 
                세션 관리용 미들웨어입니다.
                로그인 등의 이유로 세션을 구현하거나 특정 사용자를 위한 데이터를 임시적으로 저정해둘 때 매우 유용합니다.
                세션은 사용자별로 req.session 객체 안에 유지됩니다.
                cookie-parser 미들웨어 뒤에 두는 것이 좋습니다.

                세션 관리시 클라이언트에 쿠키를 보냅니다.
                안전하게 쿠키를 전송하려면 쿠키에 서명을 추가해야 하고, 쿠키를 서명하는데 secret의 값이 필요합니다.
                cookie-parser의 secret과 같게 설정하는 것이 좋습니다.
                세션쿠키의 이름은 name 옵션으로 설정합니다.
                기본 이름은 connect.sid 입니다.

                배포시에는 https를 적용하고 secure도 true로 설정하는 것이 좋습니다.

                배포시에는 store에 DB를 연결해서 세션을 유지하는 것이 좋습니다.(보통 레디스를 자주 씁니다.)
                (예제에는 현재 세션을 메모리에 저장하여 서버를 재시작하면 세션이 사라진다.)

                express-session에서 서명한 쿠키 앞에는 s:이 붙습니다.
                실제로는 encodeURIComponent 함수가 실행되어 s%3A가 됩니다.
                앞에 s%3A가 붙은 경우, 이 쿠키가 express-session 미들웨어에 의해 암호화된 것이라고 생각하면 됩니다.

multer : multipart.html
        이미지, 동영상을 비롯한 여러 가지 파일들을 멀티파트 형식으로 업로드할 때 사용하는 미들웨어입니다. 
        멀티파트 형식이란 위의 파일에서와 같이 enctype이 multipart/form-data인 폼을 통해 업로드하는 데이터 형식을 의미합니다.
        이러한 폼을 통해 업로드하는 파일은 body-parser로는 처리할 수 없고 직접 파싱(해석)하기도 어려우므로
        multer라는 미들웨어를 따로 사용하면 편리합니다.

        서버에 uploads 폴더가 존재해야합니다. 없다면 직접 만들어주거나 다음과 같이 fs 모듈을 사용해서 서버를 시작할 때 생성합니다. (p. 246참조)

        설정이 끝나면 upload 변수가 생깁니다.
        여기에 다양한 종류의 미들웨어가 있습니다. 

        upload.single (): 파일을 하나만 업로드하는 경우
        upload.array (): 여러파일을 업로드하는 경우 (form 태그 안의 input 태그에는 multiple을 쓰면 됩니다.)
        upload.fields (): 파일을 여러 개 업로드하지만 input 태그나 폼 데이터의 키가 다른 경우
                        인수로 태그의 name을 각각 적습니다.
        upload.none() : 특수한 경우로 파일을 업로드하지 않고도 멀티파트 형식으로 업로드하는 경우
                        파일을 업로드하지 않았으므로 req.body만 존재합니다.
 
        

